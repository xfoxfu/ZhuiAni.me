// <auto-generated />
using System;
using System.Collections.Generic;
using System.Text.Json;
using Me.Xfox.ZhuiAnime;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Me.Xfox.ZhuiAnime.Migrations
{
    [DbContext(typeof(ZAContext))]
    [Migration("20230915181657_AllIdAsUlidStep1")]
    partial class AllIdAsUlidStep1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Me.Xfox.ZhuiAnime.Models.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("IdV2")
                        .HasColumnType("uuid")
                        .HasColumnName("id_v2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_category");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("Me.Xfox.ZhuiAnime.Models.Item", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<IDictionary<string, string>>("Annotations")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("annotations");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.Property<Guid?>("CategoryIdV2")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id_v2");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("IdV2")
                        .HasColumnType("uuid")
                        .HasColumnName("id_v2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<long?>("ParentItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_item_id");

                    b.Property<Guid?>("ParentItemIdV2")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_item_id_v2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_item");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_item_category_id");

                    b.HasIndex("ParentItemId")
                        .HasDatabaseName("ix_item_parent_item_id");

                    b.ToTable("item", (string)null);
                });

            modelBuilder.Entity("Me.Xfox.ZhuiAnime.Models.Link", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<IDictionary<string, string>>("Annotations")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("annotations");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("IdV2")
                        .HasColumnType("uuid")
                        .HasColumnName("id_v2");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<Guid?>("ItemIdV2")
                        .HasColumnType("uuid")
                        .HasColumnName("item_id_v2");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mime_type");

                    b.Property<long?>("ParentLinkId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_link_id");

                    b.Property<Guid?>("ParentLinkIdV2")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_link_id_v2");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_link");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_link_item_id");

                    b.HasIndex("ParentLinkId")
                        .HasDatabaseName("ix_link_parent_link_id");

                    b.ToTable("link", (string)null);
                });

            modelBuilder.Entity("Me.Xfox.ZhuiAnime.Models.Session", b =>
                {
                    b.Property<Guid>("Token")
                        .HasColumnType("uuid")
                        .HasColumnName("token");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTimeOffset>("ExpiresIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_in");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("UserIdV2")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id_v2");

                    b.Property<DateTimeOffset>("UserUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("user_updated_at");

                    b.HasKey("Token")
                        .HasName("pk_session");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_session_user_id");

                    b.ToTable("session", (string)null);
                });

            modelBuilder.Entity("Me.Xfox.ZhuiAnime.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hashed_password");

                    b.Property<Guid?>("IdV2")
                        .HasColumnType("uuid")
                        .HasColumnName("id_v2");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("ix_user_username");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Me.Xfox.ZhuiAnime.Modules.PikPak.PikPakJob", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("Bangumi")
                        .HasColumnType("bigint")
                        .HasColumnName("bangumi");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<Guid?>("IdV2")
                        .HasColumnType("uuid")
                        .HasColumnName("id_v2");

                    b.Property<DateTimeOffset>("LastFetchedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_fetched_at");

                    b.Property<string>("Regex")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("regex");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("target");

                    b.HasKey("Id")
                        .HasName("pk_pikpak_job");

                    b.ToTable("pikpak_job", (string)null);
                });

            modelBuilder.Entity("Me.Xfox.ZhuiAnime.Modules.TorrentDirectory.Torrent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<IDictionary<string, string>>("Contents")
                        .HasColumnType("jsonb")
                        .HasColumnName("contents");

                    b.Property<Guid?>("IdV2")
                        .HasColumnType("uuid")
                        .HasColumnName("id_v2");

                    b.Property<string>("LinkMagnet")
                        .HasColumnType("text")
                        .HasColumnName("link_magnet");

                    b.Property<string>("LinkTorrent")
                        .HasColumnType("text")
                        .HasColumnName("link_torrent");

                    b.Property<JsonDocument>("OriginData")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("origin_data");

                    b.Property<string>("OriginId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("origin_id");

                    b.Property<string>("OriginSite")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("origin_site");

                    b.Property<DateTimeOffset>("PublishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("published_at");

                    b.Property<string>("Size")
                        .HasColumnType("text")
                        .HasColumnName("size");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_torrent");

                    b.HasIndex("OriginSite", "OriginId")
                        .IsUnique()
                        .HasDatabaseName("ix_torrent_origin_site_origin_id");

                    b.ToTable("torrent", (string)null);
                });

            modelBuilder.Entity("Me.Xfox.ZhuiAnime.Models.Item", b =>
                {
                    b.HasOne("Me.Xfox.ZhuiAnime.Models.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_item_category_category_id");

                    b.HasOne("Me.Xfox.ZhuiAnime.Models.Item", "ParentItem")
                        .WithMany("ChildItems")
                        .HasForeignKey("ParentItemId")
                        .HasConstraintName("fk_item_item_parent_item_id");

                    b.Navigation("Category");

                    b.Navigation("ParentItem");
                });

            modelBuilder.Entity("Me.Xfox.ZhuiAnime.Models.Link", b =>
                {
                    b.HasOne("Me.Xfox.ZhuiAnime.Models.Item", "Item")
                        .WithMany("Links")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_link_item_item_id");

                    b.HasOne("Me.Xfox.ZhuiAnime.Models.Link", "ParentLink")
                        .WithMany("ChildLinks")
                        .HasForeignKey("ParentLinkId")
                        .HasConstraintName("fk_link_link_parent_link_id");

                    b.Navigation("Item");

                    b.Navigation("ParentLink");
                });

            modelBuilder.Entity("Me.Xfox.ZhuiAnime.Models.Session", b =>
                {
                    b.HasOne("Me.Xfox.ZhuiAnime.Models.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_session_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Me.Xfox.ZhuiAnime.Modules.PikPak.PikPakJob", b =>
                {
                    b.OwnsOne("Me.Xfox.ZhuiAnime.Modules.PikPak.PikPakJob+MatchGroups", "MatchGroup", b1 =>
                        {
                            b1.Property<long>("PikPakJobId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<long>("Ep")
                                .HasColumnType("bigint")
                                .HasColumnName("match_group_ep");

                            b1.HasKey("PikPakJobId");

                            b1.ToTable("pikpak_job");

                            b1.WithOwner()
                                .HasForeignKey("PikPakJobId")
                                .HasConstraintName("fk_pikpak_job_pikpak_job_id");
                        });

                    b.Navigation("MatchGroup")
                        .IsRequired();
                });

            modelBuilder.Entity("Me.Xfox.ZhuiAnime.Models.Category", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Me.Xfox.ZhuiAnime.Models.Item", b =>
                {
                    b.Navigation("ChildItems");

                    b.Navigation("Links");
                });

            modelBuilder.Entity("Me.Xfox.ZhuiAnime.Models.Link", b =>
                {
                    b.Navigation("ChildLinks");
                });

            modelBuilder.Entity("Me.Xfox.ZhuiAnime.Models.User", b =>
                {
                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
